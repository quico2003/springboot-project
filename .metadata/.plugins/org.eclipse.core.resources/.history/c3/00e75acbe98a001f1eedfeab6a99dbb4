package com.proyectoWebServidor.quico_proyecto_spring_boot.mvc;
import org.eclipse.tags.shaded.org.apache.bcel.generic.NEW;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.proyectoWebServidor.quico_proyecto_spring_boot.model.ram.Clientes;
import com.proyectoWebServidor.quico_proyecto_spring_boot.model.ram.Pagina;
import com.proyectoWebServidor.quico_proyecto_spring_boot.srv.LoginService;

import jakarta.validation.Valid;

@Controller
public class loginController {
	
	@Autowired
	private LoginService loginService;
	
	//Metodo que atiende a /
	@RequestMapping(value = {"/", "/login"}, method = RequestMethod.GET)
	public String mostrarLogin(ModelMap model) {
		model.addAttribute("pagina", new Pagina("login", "login"));
		return "login";
	}
	

	//Metodo que actua frente a la reespuesta de el action login
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String ProcesarLogin(@RequestParam String nombre, @RequestParam String password, ModelMap model) {
		
		//Verificar si el nombre y contraseña son correctos
	    if (!loginService.verificarAlumno(nombre, password)) {
	        model.addAttribute("error", "Usuario o contraseña incorrectos");  // Añadir mensaje de error si es necesario
	        return "login";//Volver a la página de login
	    } else {
	    	model.addAttribute("nombre", nombre);
	    	model.addAttribute("pagina", new Pagina("inicio", "inicio"));
	        return "pagina-inicio";//Segir con la pagina de inicio
	    }
	}
	
	//Metodo que actua frente a la respuesta del registro
	@RequestMapping(value = "/registro", method = RequestMethod.GET)
	public String registroCliente(ModelMap model) {
		model.addAttribute("pagina", new Pagina("registro", "registro"));
		model.addAttribute("cliente", new Clientes(null, null, null, null));
		return "registro";
	}
	
	//Metodo que actua frente a la respuesta de add-cliente
	@RequestMapping(value = "/registro", method = RequestMethod.POST)
	public String addCliente(ModelMap model, @Valid Clientes cliente, BindingResult validacion) {
		
		//Comprueva si las validaciones son correctas o si no lo son
		if(validacion.hasErrors()) {
			
			return "registro";
		}
		
		//Llama al servicio para que mediante el metodo addCliente
		//añada a este en el arrayList y devuelve al login
		try {
			loginService.addCliente(cliente);
			
			model.clear();
			
			return "redirect:/login";
		//Controla las excepciones
		} catch (Exception e) {
			model.addAttribute("error", e.getMessage());
		}
		
		return "registro";
	}
}